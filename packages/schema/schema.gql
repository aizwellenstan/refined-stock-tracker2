scalar Date

enum Order {
  ASC
  DESC
}

type PageInfo {
  # Whether or not there are next pages
  hasNextPage: Boolean!
  # Whether or not there are previous pages
  hasPreviousPage: Boolean!
  # Total count
  totalCount: Int
}

type Activity {
  # ID of the activity
  id: ID!
  # Name of the activity
  name: String!
  # Description of the streaming
  description: String!
  # Whether public
  public: Int!
  # URL of the activity
  url: String!
  # Thumbnail of the activity
  thumbnail: String!
  # Start date time on ISO 8601
  startAt: Date!
  # End date time on ISO 8601
  endAt: Date!
  # Created date time
  createdAt: Date!
  # Updated date time
  updatedAt: Date!
  # Sources of the activity
  performers: [Performer!]!
  # Associated category
  category: Category
  # Matched team
  team: Team
}

type ActivityConnection {
  nodes: [Activity!]!
  pageInfo: PageInfo!
}

input ActivitiesInput {
  limit: Int
  offset: Int
  order: Order
  performerId: ID
  teamId: ID
  categoryId: ID
  afterDate: Date
  beforeDate: Date
}

type Performer {
  # ID of the performer
  id: ID!
  # Name of the performer
  name: String!
  # Romanized name of the performer
  latinName: String!
  # Ruby for name of the performer
  ruby: String!
  # URL of the avatar for the performer
  avatar: String!
  # URL of the full-body image for the performer
  fullBody: String!
  # Hex colour code
  color: String!
  # Description of the performer
  description: String!
  # If the  performer is public
  public: Int!
  # Unknown...
  position: Int
  # Created date time
  createdAt: Date!
  # Updated date time
  updatedAt: Date!
  # External services' information
  socialAccounts: [SocialAccount!]!
  # Involved teams
  teams: [Team!]!
  # Activities
  activities: ActivityConnection!
}

type PerformerConnection {
  nodes: [Performer!]!
  pageInfo: PageInfo!
}

input PerformersInput {
  limit: Int
  offset: Int
  order: Order
}

type Team {
  # ID of the team
  id: ID!
  # Name of the team
  name: String!
  # Created date time
  createdAt: Date!
  # Updated date time
  updatedAt: Date!
  # Involved performers
  members: [Performer!]!
  # Activities
  activities: ActivityConnection!
}

type TeamConnection {
  nodes: [Team!]!
  pageInfo: PageInfo!
}

input TeamsInput {
  limit: Int
  offset: Int
  order: Order
  performerId: ID
}

type Category {
  # ID of the category
  id: ID!
  # name
  name: String!
  # Activities
  activities(input: ActivitiesInput): ActivityConnection!
}

type CategoryConnection {
  nodes: [Category!]!
  pageInfo: PageInfo!
}

input CategoriesInput {
  limit: Int
  offset: Int
  order: Order
}

interface SocialAccount {
  # Internal ID of the channel
  id: ID!
  # Created date time
  createdAt: Date!
  # Updated date time
  updatedAt: Date!
}

type YoutubeAccount implements SocialAccount {
  # Internal ID of the channel
  id: ID!
  # ID of the channel
  channelId: ID!
  # Name of the channel
  channelName: String!
  # Order of creation
  creationOrder: Int!
  # Created date time
  createdAt: Date!
  # Updated date time
  updatedAt: Date!
}

type TwitterAccount implements SocialAccount {
  # Internal ID of the channel
  id: ID!
  # Screenname of the account like @twitter
  screenName: String!
  # Created date time
  createdAt: Date!
  # Updated date time
  updatedAt: Date!
}

type SearchResult {
  performers: [Performer!]!
  activities: [Activity!]!
  teams: [Team!]!
  categories: [Category!]!
}

type Query {
  # Search performers, activities, teams and categories
  search(query: String!): SearchResult!
  # Fetch single activity
  activity(id: ID!): Activity
  # Fetch activities
  activities(input: ActivitiesInput): ActivityConnection!
  # Fetch single performer
  performer(id: ID!): Performer
  # Fetch performers
  performers(input: PerformersInput): PerformerConnection!
  # Fetch single category
  category(id: ID!): Category
  # Fetch categories
  categories(input: CategoriesInput): CategoryConnection!
  # Fetch single team
  team(id: ID!): Team
  # Fetch teams
  teams(input: TeamsInput): TeamConnection!
}

schema {
  query: Query
}
